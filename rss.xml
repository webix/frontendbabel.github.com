<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Frontend Babel]]></title>
        <description><![CDATA[Articles and blog posts from all over the world. Translated INTO English.]]></description>
        <link>http://frontendbabel.info</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 14 Jul 2014 12:45:21 GMT</lastBuildDate>
        <atom:link href="http://frontendbabel.info/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Frontend Babel]]></author>
        <pubDate>Mon, 14 Jul 2014 12:45:14 GMT</pubDate>
        <item>
            <title><![CDATA[Acquaintance with SVG images]]></title>
            <description><![CDATA[<p class="text__p">SVG is quite a mature technology but it began to gain its popularity just recently. Mostly due to the fact that
vector graphics perfectly suit for adaptive web sites. If you have just started to learn SVG,
here is some information you can start with.</p><!-- cut -->

<p class="text__p">SVG is a vector image format that uses XML.</p><p class="text__p">Specification: <a href="http://www.w3.org/TR/SVG/">w3.org/TR/SVG</a></p><p class="text__p">SVG has a lot of advantages over raster graphics:</p><ul>
<li>Vector images are lossless when being scaled and look nicer with retina displays;</li>
<li>Usually the size of SVG data is less than data size of PNG image with the same picture;</li>
<li>The image is defined with XML so that you can open it in a text editor and see the code;</li>
<li>And so you can code an image manually besides drawing it in a vector graphics editor;</li>
<li>An SVG file is a source in itself. Unlike bitmaps` case you do not need a PSD file to edit the SVG image. Its layers are
not flattened; you can always open the image source and change it. However this trick is not recommended as you may
overwrite scripts and styles;</li>
<li>You can define shadows and gradients in an SVG file; moreover, you can use them not only for this file content but
apply to the elements from outside (although this is not supported everywhere yet);</li>
<li>SVG file can contain CSS and JavaScript.</li>
</ul>
<p class="text__p">Example of SVG:</p><iframe id="cp_embed_vzBxp"
src="//codepen.io/anon/embed/vzBxp?height=263&amp;theme-id=4974&amp;slug-hash=vzBxp&amp;default-tab=result"
scrolling="no" frameborder="0" height="263" allowtransparency="true" class="cp_embed_iframe" style="width: 100%;
overflow: hidden;"></iframe>

<p class="text__p">All the modern browsers support SVG and so you can already use it providing PNG alternative for previous versions.</p><p class="text__p">The format is nice for adaptive design due to its capability to scale losslessly, small data size and being crisp at
devices with high pixel ratio. The next mobile screenshot demonstrates this:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="http://img-fotki.yandex.ru/get/9809/5091629.9d/0_7fa35_27e932b6_L.jpg"/></p><div class="article__tip">
The sign says &quot;Hello! :-)&quot; in Russian
</div>

<p class="text__p">The picture clearly shows that SVG (below) looks nicer than PNG (above). So if you are to build a website with
astounding view at every device, SVG may come into play.</p><p class="text__p">Nowadays you can already find a lot of websites with ready-to-use SVG images. For instance,</p><ul>
<li><a href="http://iconmelon.com/">iconmelon.com</a></li>
<li><a href="http://icomoon.io/app/#/select">icomoon.io</a></li>
<li><a href="http://www.flaticon.com/">flaticon.com</a></li>
<li><a href="http://iconmonstr.com/">iconmonstr.com</a></li>
</ul>
<p class="text__p">Mostly they provide icon sets.</p><p class="text__p">You can use the images as is or repaint them, join into a stack or sprite, or create a font.</p><p class="text__p">You can paste SVG into a web page in a number of ways. They have different browser support and give various
capabilities.</p><h3 class="text-header text-header_lvl_3" id="embedobjectiframe"><a href="#embedobjectiframe" class="text-header__anchor">Embed/object/iframe</a></h3><p class="text__p">The content is available for external JavaScript.<br/>
It has good browser support (all but IE8 and earlier).</p><table style="width: 100%; text-align: center;">
    <thead>
        <tr>
            <td>Embed:</td>
            <td>Object:</td>
            <td>Iframe:</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><embed src="/articles/acquaintance-with-svg/sign.svg" width="199" height="200"/></td>
            <td><object type="image/svg+xml" data="/articles/acquaintance-with-svg/sign.svg" width="199" height="200"></object></td>
            <td><iframe src="/articles/acquaintance-with-svg/sign.svg" width="199px" height="200px"></iframe></td>
        </tr>
    </tbody>
</table>

<h4 class="text-header text-header_lvl_4" id="embed"><a href="#embed" class="text-header__anchor">Embed</a></h4><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;embed src="your.svg"
        width="199" height="200"></code></pre><h4 class="text-header text-header_lvl_4" id="object"><a href="#object" class="text-header__anchor">Object</a></h4><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;object data="your.svg"
        type="image/svg+xml" width="199" height="200"></object></code></pre><h4 class="text-header text-header_lvl_4" id="iframe"><a href="#iframe" class="text-header__anchor">Iframe</a></h4><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;iframe src="your.svg"
        width="199px" height="200px"></iframe></code></pre><p class="text__p">Browser support:</p><table class="text-table"><thead class="text-table__head"><tr class="text-table__row"><th class="text-table__th">IE</th><th class="text-table__th">Opera</th><th class="text-table__th">Opera Mini</th><th class="text-table__th">Opera Mobile</th><th class="text-table__th">Chrome</th><th class="text-table__th">Firefox</th><th class="text-table__th">Safari</th></tr></thead><tbody class="text-table__body"><tr class="text-table__row"><td class="text-table__td"> 9+</td><td class="text-table__td">9+</td><td class="text-table__td">5+</td><td class="text-table__td">10+</td><td class="text-table__td">4+</td><td class="text-table__td">3+</td><td class="text-table__td">3.2+</td></tr></tbody></table><h3 class="text-header text-header_lvl_3" id="img"><a href="#img" class="text-header__anchor">IMG</a></h3><p class="text__p">In this case the content is not available for JavaScript.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="/articles/acquaintance-with-svg/sign.svg"/></p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;img src="your.svg"/></code></pre><p class="text__p">Browser support:</p><table class="text-table"><thead class="text-table__head"><tr class="text-table__row"><th class="text-table__th">IE</th><th class="text-table__th">Opera</th><th class="text-table__th">Opera Mini</th><th class="text-table__th">Opera Mobile</th><th class="text-table__th">Chrome</th><th class="text-table__th">Firefox</th><th class="text-table__th">Safari</th></tr></thead><tbody class="text-table__body"><tr class="text-table__row"><td class="text-table__td"> 9+</td><td class="text-table__td">9+</td><td class="text-table__td">5+</td><td class="text-table__td">10+</td><td class="text-table__td">4+</td><td class="text-table__td">4+</td><td class="text-table__td">4+</td></tr></tbody></table><h3 class="text-header text-header_lvl_3" id="css-background"><a href="#css-background" class="text-header__anchor">CSS background</a></h3><p class="text__p">The content is not available for JavaScript; and you can have issues with older Opera versions. Opera Mini does not
support SVG CSS backgrounds with viewBox.</p><div style="width: 199px; height: 200px; margin-bottom: 1em; background-image: url(http://css.yoksel.ru/assets/img/svg/sign.svg)"></div>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>background-image: url(your.svg);</code></pre><p class="text__p">Browser support:</p><table class="text-table"><thead class="text-table__head"><tr class="text-table__row"><th class="text-table__th">IE</th><th class="text-table__th">Opera</th><th class="text-table__th">Opera Mini</th><th class="text-table__th">Opera Mobile</th><th class="text-table__th">Chrome</th><th class="text-table__th">Firefox</th><th class="text-table__th">Safari</th></tr></thead><tbody class="text-table__body"><tr class="text-table__row"><td class="text-table__td"> 9+</td><td class="text-table__td">12+</td><td class="text-table__td">5+</td><td class="text-table__td">16+</td><td class="text-table__td">5+</td><td class="text-table__td">24+</td><td class="text-table__td">5+</td></tr></tbody></table><h3 class="text-header text-header_lvl_3" id="inline-svg"><a href="#inline-svg" class="text-header__anchor">Inline SVG</a></h3><p class="text__p">This is not supported by Opera Mini.</p><svg width="199" height="200"><g fill="#7ED321"><path d="M110 10h-20v76.567l-.605-.605-62.933 62.933 14.142 14.142 49.395-49.395v76.358h20v-76.358l49.395 49.395 14.142-14.142-62.933-62.933-.605.605v-76.567z" /><path d="M99.5 0c-54.965 0-99.5 44.784-99.5 100s44.535 100 99.5 100 99.5-44.784 99.5-100-44.535-100-99.5-100zm0 20c43.894 0 79.5 35.805 79.5 80s-35.606 80-79.5 80-79.5-35.805-79.5-80 35.606-80 79.5-80z" /></g></svg>

<p class="text__p">Browser support:</p><table class="text-table"><thead class="text-table__head"><tr class="text-table__row"><th class="text-table__th">IE</th><th class="text-table__th">Opera</th><th class="text-table__th">Opera Mini</th><th class="text-table__th">Opera Mobile</th><th class="text-table__th">Chrome</th><th class="text-table__th">Firefox</th><th class="text-table__th">Safari</th></tr></thead><tbody class="text-table__body"><tr class="text-table__row"><td class="text-table__td"> 9+</td><td class="text-table__td">11.6+</td><td class="text-table__td">-</td><td class="text-table__td">12+</td><td class="text-table__td">7+</td><td class="text-table__td">4+</td><td class="text-table__td">5.1+</td></tr></tbody></table><p class="text__p">The examples above are placed into this article page exactly as described. You can open the very page in another browser
and observe how SVG works there.</p><h2 class="text-header text-header_lvl_2" id="ways-to-deal-with-older-browsers"><a href="#ways-to-deal-with-older-browsers" class="text-header__anchor">Ways to deal with older browsers</a></h2><h3 class="text-header text-header_lvl_3" id="1-background-hack"><a href="#1-background-hack" class="text-header__anchor">1. Background hack</a></h3><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>DIV {
    background-image: url(your.png); /* PNG for IE6-8 */
    background-image: url(your.svg), none;
    }</code></pre><p class="text__p">The second <code>background-image</code> works for browsers supporting CSS3. Others ignore it and so show the PNG background.</p><h3 class="text-header text-header_lvl_3" id="2-the-image-method"><a href="#2-the-image-method" class="text-header__anchor">2. The <code>image</code> method</a></h3><p class="text__p">Modern browsers choose <code>xlink:href</code> attribute and render SVG image; others show the bitmap.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="200px" height="200px">
    &lt;image xlink:href="your.svg"
           src="your.png"
           width="200px" height="200px"/>
&lt;/svg></code></pre><p class="text__p">The image trick was picked up from this post: <a href="http://lynn.ru/examples/svg/en.html">http://lynn.ru/examples/svg</a>. The
method was <a href="http://css-tricks.com/svg-fallbacks/">investigated by Chris Coyier</a>, you can find his review over the trick
and proposal of others.</p><p class="text__p">That works correctly in IE8 and Opera Mini.
However it has a drawback. IE9-11 downloads all the two images although only SVG is used for rendering. Opera sometimes
has problems too. You may get the following instead of your picture:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="http://img-fotki.yandex.ru/get/9831/5091629.9d/0_7f9f6_9033810_M.png"/></p><h3 class="text-header text-header_lvl_3" id="3-modernizr"><a href="#3-modernizr" class="text-header__anchor">3. Modernizr</a></h3><p class="text__p">Elements containing SVG are wrapped with <code>div.svg</code>. Then, you can detect if a browser supports SVG using
<a href="http://modernizr.com/">Modernizr</a>; browsers which do not understand SVG get <code>.no-svg</code> CSS class. With a piece of CSS
you can hide the SVG images for the browsers that do not render them:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>/* Define size and PNG background for the wrapper: */
.no-svg .svg {
  width: 200px;
  height: 200px;
  background: url(your.png); /* PNG backdrop */
  }

/* Hide elements inside the wrapper. Otherwise there would be icons of
not loaded images */
.no-svg .svg IFRAME,
.no-svg .svg OBJECT,
.no-svg .svg EMBED,
.no-svg .svg IMG {
  display: none;
}</code></pre><p class="text__p">This method works nicely in IE8 (and earlier IE versions). However you might have a problem with Opera Mini.
This browser provides partial SVG support and so does not get <code>.no-svg</code> CSS class whereas it cannot render SVG CSS
background and inline SVG inserts.</p><p class="text__p">It is also possible to use <a href="http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">this
method</a> to detect IE.</p><h3 class="text-header text-header_lvl_3" id="4-root"><a href="#4-root" class="text-header__anchor">4. :root</a></h3><p class="text__p">The <code>:root</code> CSS selector is only supported by browsers that understand CSS3. So it can be used to separate CSS rules
for modern and older browsers.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>/* Display PNG by default */
.svg {
  width: 200px;
  height: 200px;
  background: url(your.png);
}

/* Hide elements containing SVG */
.svg IFRAME,
.svg OBJECT,
.svg EMBED,
.svg IMG {
  display: none;
}

/* Show SVG containers for the browsers with CSS3 */
:root IFRAME,
:root OBJECT,
:root EMBED,
:root IMG {
  display: inline-block;
}</code></pre><p class="text__p">Like the previous solution this works correctly to weed out IE8 (and the aged) but does not help in Opera Mini&#39;s case
since it supports CSS3 and so the SVG containder will be switched on anyway.</p><h3 class="text-header text-header_lvl_3" id="5-solution-for-opera-with-presto-version-12-or-mini"><a href="#5-solution-for-opera-with-presto-version-12-or-mini" class="text-header__anchor">5. Solution for Opera with Presto (version 12 or Mini)</a></h3><p class="text__p">In Opera 12 SVG backgrounds are weirdly odd. Simple CSS code, harmless at first glance, can cause render issues with
SVG backgrounds when scrolling. I was lucky to get pictures like this:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="http://img-fotki.yandex.ru/get/9746/5091629.9d/0_7f9f8_dff062ac_L.png"/></p><p class="text__p">You can examine the working example here: <a href="http://jsbin.com/winag/2/edit">http://jsbin.com/winag/2/edit</a><br/>
<em>Open this page with Opera 12 and scroll up and down.</em></p><p class="text__p">Opera Mini has issues with SVG backgrounds and does not support inlined SVG at all. This is how SVG background looks
like with it:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="http://img-fotki.yandex.ru/get/9819/5091629.9d/0_7f9f7_19c1f3e9_L.png"/></p><p class="text__p">For such a case you can use this <em>special for Opera</em> hack:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>doesnotexist:-o-prefocus, .selector {
  background-image: url(your.png);
}</code></pre><p class="text__p">This method uses specific Opera selector. You can learn details here:
<a href="http://www.opera.com/docs/specs/presto2.12/css/o-vendor/">http://www.opera.com/docs/specs/presto2.12/css/o-vendor/</a>.</p><h3 class="text-header text-header_lvl_3" id="6-specific-opera-mini-selector"><a href="#6-specific-opera-mini-selector" class="text-header__anchor">6. Specific Opera Mini selector</a></h3><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>@media all and (-webkit-min-device-pixel-ratio:10000),
       not all and (-webkit-min-device-pixel-ratio:0) {
  .selector {
    background-image: url(your.png);
  }
}</code></pre><h2 class="text-header text-header_lvl_2" id="to-be-continued"><a href="#to-be-continued" class="text-header__anchor">To be continued</a></h2><p class="text__p">Everything written above is just the tip of the iceberg. There is plenty of interesting in the SVG specification.
To be continued! :-)</p><h3 class="text-header text-header_lvl_3" id="further-links"><a href="#further-links" class="text-header__anchor">Further links</a></h3><ul>
<li><a href="http://caniuse.com/#search=svg">Browsers support for SVG</a></li>
<li><a href="http://css-tricks.com/svg-fallbacks/">SVG Fallbacks</a></li>
<li><a href="http://modernizr.com/">Modernizr</a></li>
<li><a href="http://dbushell.com/2013/02/04/a-primer-to-front-end-svg-hacking/">A Primer to Front-end SVG Hacking</a></li>
<li><a href="http://lynn.ru/examples/svg/en.html">SVG and <image> tag tricks</a></li>
</ul>
]]></description>
            <link>http://frontendbabel.info/articles/acquaintance-with-svg</link>
            <guid isPermaLink="true">http://frontendbabel.info/articles/acquaintance-with-svg</guid>
            <dc:creator><![CDATA[Yulya Buhvalova]]></dc:creator>
            <pubDate>Thu, 10 Jul 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Developing Cross-Browser Extensions]]></title>
            <description><![CDATA[<p class="text__p">What do we do if we have to search for something? Of course, we fire up our favorite search engine web site. It is quite hard to push yourself to use another a different search engine rather than the usual one, even if you know that the result would be better. To change this UX pattern I developed <a href="https://chrome.google.com/webstore/detail/likeastore/einhadilfmpdfmmjnnppomcccmlohjad">Likeastore Chrome
Extension</a>. It adds social
part to your search flow by showing relevant information from the article you liked. Besides Chrome we support Firefox
and Safari. Despite the platform difference all these extensions are built from the same codebase.</p><!-- cut -->

<h2 class="text-header text-header_lvl_2" id="at-the-first-set-out"><a href="#at-the-first-set-out" class="text-header__anchor">At the first set-out</a></h2><p class="text__p">This began with me developing a simple Chrome extension. By the way, developing for Chrome was very comfortable. I
didn&#39;t go through the hassle of automation, just packed code into a zip after some local testing and then uploaded
this to the Web Store.</p><p class="text__p">The Chrome extension was very welcomed by our customers which had been proved by metrics and feedback and meant that we
should continue. The next was Firefox as it has 15% of our traffic.</p><p class="text__p">The basis of all browser extensions is the same: they are HTML/CSS/JavaScript applications with a manifest file where the
content and the properties are described. So my initial idea was to copy the Chrome extension&#39;s repository and adjust
the code for Firefox.</p><p class="text__p">While developing I had that guilty feeling for doing copy-paste; many developers must be familiar with it. Obviously, 99% of code was the same for both extensions and it could bring problems with application support as more and more functionallity was being added.</p><p class="text__p">By a lucky chance I bumped into <a href="https://github.com/buunguyen/octotree">octotree</a> extension (which I recommend to all
active GitHub users) and met the need to fix a bug in it. When I cloned their repository and began to explore the code,
I realized that all the octotree extensions are built from this repo code. Octotree is a content injection application
similar to Likeastore, so this pattern could be borrowed.</p><p class="text__p">I <a href="https://github.com/buunguyen/octotree/pull/60">fixed the bug</a> and adapted and improved the compilation process
to fit Likeastore needs. Let&#39;s have a look at what it turned out to be.</p><h2 class="text-header text-header_lvl_2" id="application-structure"><a href="#application-structure" class="text-header__anchor">Application structure</a></h2><p class="text__p">I propose the application structure which I believe is suitable for any extension.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "bash"} }'><code>browser-extention/
  build/
    chrome/
    firefox/
    safari/
  css/
  dist/
    chrome/
    firefox/
    safari/
  img/
  js/
  libs/
  node_modules/
  tools/
  vendor/
  gulpfile.js
  package.json
  README.md</code></pre><p class="text__p"><code>build</code> and <code>dist</code> folders are generic and contain source code and application for distribution, respectively.</p><p class="text__p"><code>css</code>, <code>img</code>, and <code>js</code> hold the source code of the application.</p><p class="text__p"><code>vendor</code> has platform-depending code in a separate directory for every browser.</p><p class="text__p"><code>tools</code> is a place for building utils.</p><p class="text__p">The build runs with <a href="http://gulpjs.com/">gulp</a>, a &quot;reconsidered&quot; build system under NodeJS. I recommend to install node
if you are not using it yet, you will be able to enjoy all the profits of the npm world.</p><h3 class="text-header text-header_lvl_3" id="platform-dependent-code"><a href="#platform-dependent-code" class="text-header__anchor">Platform-dependent code</a></h3><p class="text__p">To begin with the most important: if you are staring a new project or want to adapt another one, you should clearly
understand what are the needed platform-dependent calls and place them into a dedicated module.</p><p class="text__p">In my case there was only one such call: getting our resource URL from inside the app (where there are images). So I
had a separate <code>browser.js</code> file.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>;(function (window) {
  var app = window.app = window.app || {};

  app.browser = {
    name: 'Chrome',

    getUrl: function (url) {
      return chrome.extension.getURL(url);
    }
  };
})(window);</code></pre><p class="text__p">The different variants of this module are used for <a href="https://github.com/likeastore/browser-extension/blob/master/vendor/firefox/browser.js">Firefox</a>
and <a href="https://github.com/likeastore/browser-extension/blob/master/vendor/safari/browser.js">Safari</a>.</p><p class="text__p">The <code>browser.js</code> file can be extended with all the necessary calls for more complex cases and so be a facade between
the specific code and the browser.</p><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>vendor/
  chrome/
    browser.js
    manifest.json
  firefox/
    browser.js
    main.js
    package.json
  safari/
    browser.js
    Info.plist
    Settings.plist
    Update.plist</code></pre><p class="text__p">Besides the facade, platform-dependent code also means manifests and extension settings. They are <code>manifest.json</code> for
Chrome, <code>main.js</code> and <code>package.json</code> for Firefox and <code>.plist</code> files for Safari such as <code>Info.plist</code>, <code>Settings.plist</code>,
and <code>Update.plist</code>.</p><h3 class="text-header text-header_lvl_3" id="automating-build-process-with-gulp"><a href="#automating-build-process-with-gulp" class="text-header__anchor">Automating build process with gulp</a></h3><p class="text__p">The purpose of a build process is to copy the core code and platform-dependent code into folders tree expected by the browsers.</p><p class="text__p">Let&#39;s define 3 tasks for that:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>var gulp     = require('gulp');
var clean    = require('gulp-clean');
var es       = require('event-stream');
var rseq     = require('gulp-run-sequence');
var zip      = require('gulp-zip');
var shell    = require('gulp-shell');
var chrome   = require('./vendor/chrome/manifest');
var firefox  = require('./vendor/firefox/package');

function pipe(src, transforms, dest) {
  if (typeof transforms === 'string') {
    dest = transforms;
    transforms = null;
  }

  var stream = gulp.src(src);
  transforms && transforms.forEach(function(transform) {
    stream = stream.pipe(transform);
  });

  if (dest) {
    stream = stream.pipe(gulp.dest(dest));
  }

  return stream;
}

gulp.task('clean', function() {
  return pipe('./build', [clean()]);
});

gulp.task('chrome', function() {
  return es.merge(
    pipe('./libs/**/*', './build/chrome/libs'),
    pipe('./img/**/*', './build/chrome/img'),
    pipe('./js/**/*', './build/chrome/js'),
    pipe('./css/**/*', './build/chrome/css'),
    pipe('./vendor/chrome/browser.js', './build/chrome/js'),
    pipe('./vendor/chrome/manifest.json', './build/chrome/')
  );
});

gulp.task('firefox', function() {
  return es.merge(
    pipe('./libs/**/*', './build/firefox/data/libs'),
    pipe('./img/**/*', './build/firefox/data/img'),
    pipe('./js/**/*', './build/firefox/data/js'),
    pipe('./css/**/*', './build/firefox/data/css'),
    pipe('./vendor/firefox/browser.js', './build/firefox/data/js'),
    pipe('./vendor/firefox/main.js', './build/firefox/data'),
    pipe('./vendor/firefox/package.json', './build/firefox/')
  );
});

gulp.task('safari', function() {
  return es.merge(
    pipe('./libs/**/*', './build/safari/likeastore.safariextension/libs'),
    pipe('./img/**/*', './build/safari/likeastore.safariextension/img'),
    pipe('./js/**/*', './build/safari/likeastore.safariextension/js'),
    pipe('./css/**/*', './build/safari/likeastore.safariextension/css'),
    pipe('./vendor/safari/browser.js', './build/safari/likeastore.safariextension/js'),
    pipe('./vendor/safari/Info.plist', './build/safari/likeastore.safariextension'),
    pipe('./vendor/safari/Settings.plist', './build/safari/likeastore.safariextension')
  );
});</code></pre><p class="text__p">The default task builds all the three extensions:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>gulp.task('default', function(cb) {
    return rseq('clean', ['chrome', 'firefox', 'safari'], cb);
});</code></pre><p class="text__p">In addition, a good idea that ensures comfortable development is to watch the file changes and run a background build:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>gulp.task('watch', function() {
  gulp.watch(['./js/**/*', './css/**/*', './vendor/**/*', './img/**/*'], ['default']);
});</code></pre><h3 class="text-header text-header_lvl_3" id="ready-to-distribute"><a href="#ready-to-distribute" class="text-header__anchor">Ready to distribute</a></h3><p class="text__p">Having the build finished, you need to pack the extension into a format requested by the browser extension storage. I
have to note that in Safari&#39;s case there is no such store but they can show your extension in their gallery and
link to where you host it if you match their requirements.</p><p class="text__p">For Chrome, you only need to pack into a <code>.zip</code>. It is signed and verified in the Chrome Web Store.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>gulp.task('chrome-dist', function () {
  gulp.src('./build/chrome/**/*')
    .pipe(zip('chrome-extension-' + chrome.version + '.zip'))
    .pipe(gulp.dest('./dist/chrome'));
});</code></pre><p class="text__p">Firefox procedure is a little bit more complex as you need to use the SDK including <code>cfx</code> which can wrap your extension
into an <code>.xpi</code> file.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>gulp.task('firefox-dist', shell.task([
  'mkdir -p dist/firefox',
  'cd ./build/firefox && ../../tools/addon-sdk-1.16/bin/cfx xpi ' +
  '--output-file=../../dist/firefox/firefox-extension-' + firefox.version +
  '.xpi > /dev/null',
]));</code></pre><p class="text__p">As for Safari, that was a bummer. That turned out that to get <code>.safariextz</code> package you need to run Safari. I&#39;ve spent a
few hours to make it work according to <a href="http://stackoverflow.com/questions/3423522/how-can-i-build-a-safari-extension-package-from-the-command-line">the manual</a>
but did not succeed. The point is that it is not possible to convert your developer certificate into <code>.p12</code> and so
you are not able to create the keys needed to sign a package. I still have to run Safari manually to pack the extension yet the release is now as simple as copying the <code>Update.plist</code> file.</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>gulp.task('safari-dist', function () {
  pipe('./vendor/safari/Update.plist', './dist/safari');
});</code></pre><h3 class="text-header text-header_lvl_3" id="summing-up"><a href="#summing-up" class="text-header__anchor">Summing up</a></h3><p class="text__p">This is joy and pleasure to develop with a single repository. As I mentioned, I found Chrome to be the most comfortable
development environment, so I provide all the changes for it first and test with it.</p><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>$ gulp watch</code></pre><p class="text__p">Firefox goes next</p><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>$ gulp firefox-run</code></pre><p class="text__p">And then the manual tampering with Safari.</p><p class="text__p">Once I need to release a new version, I update the manifests and run</p><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>$ gulp dist</code></pre><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>dist/
  chrome/
    chrome-extention-1.0.10.zip
    chrome-extention-1.0.6.zip
    chrome-extention-1.0.8.zip
    chrome-extention-1.0.9.zip
  firefox/
    firefox-extention-1.0.10.xpi
    firefox-extention-1.0.6.xpi
    firefox-extention-1.0.7.xpi
    firefox-extention-1.0.8.xpi
    firefox-extention-1.0.9.xpi
  safari/
    likeastore.safariextz
    Update.plist</code></pre><p class="text__p">As a result, there are ready-to-distribute files in the <code>dist</code> folder. This would be perfect if extension stores
would have an API for uploading a new version, but they don&#39;t. This is done manually.</p><p class="text__p">For more details and code please proceed to <a href="https://github.com/likeastore/browser-extension">the repository</a>.</p>]]></description>
            <link>http://frontendbabel.info/articles/developing-cross-browser-extensions</link>
            <guid isPermaLink="true">http://frontendbabel.info/articles/developing-cross-browser-extensions</guid>
            <dc:creator><![CDATA[Alexander Beletsky]]></dc:creator>
            <pubDate>Mon, 07 Jul 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Graphical interface]]></title>
            <description><![CDATA[<p class="text__p">Let me introduce myself. I am an <em>Interface Designer</em> at Yandex, and I&#39;ve been involved with projects like Yandex.Maps
and Search Engine Results Page, and also designed brand icons, promo materials, documentation, a project planner, a
shared interface component library, and a fast prototyping system. Besides that, I follow my colleagues&#39; projects such
as Yandex Main Page and other Yandex portal services: Market, News, Images, Video, Disk, Auto, Realty. I see how these
projects grow and evolve.</p><!-- cut -->

<p class="text__p">After some time, I drew certain conclusions from this process, and decided to share those of them which were proven by
stats and numbers. This is an overview, focused on these questions:</p><ul>
<li>Should an interface designer be able to draw and work with fonts?</li>
<li>Should designers work on texts themselves?</li>
<li>Is it necessary to code and do HTML/CSS?</li>
<li>How interfaces should be evaluated?</li>
</ul>
<p class="text__p">Before we dive in, here is a couple of common term definitions:</p><p class="text__p"><em>Interface</em> is a model of interaction with a product.</p><p class="text__p"><em>Designer</em> is a person who defines interface type and content.</p><p class="text__p">Examples of interface types:</p><ul>
<li>graphical</li>
<li>programming</li>
<li>command line</li>
<li>voice interface</li>
</ul>
<p class="text__p">The graphical interface is what we are discussing.</p><p class="text__p">I&#39;d like to emphasize that &quot;interface&quot; does not equal &quot;buttons&quot;, and &quot;designer&quot; is not an antipode of &quot;developer&quot;.</p><p class="text__p">An extra note: I can&#39;t say I read lots of books on the subject, I don&#39;t have a degree in arts; nonetheless, design is
how I earn money since my university years. Therefore my experience comes mostly from practice and observing the world
around me.</p><h2 class="text-header text-header_lvl_2" id="shape"><a href="#shape" class="text-header__anchor">Shape</a></h2><p class="text__p">When I was a kid, I saw drawing as a process of projecting images out of my head onto a piece of paper. Later on, when
I started copying images from comic books or drawing things I saw around, the process of drawing became a practical
skill of observing and correctly measuring various object details.</p><p class="text__p">It didn&#39;t take me much time to understand the true value of form, but it wasn&#39;t until much later that I started paying
more attention to color. Still being a schoolboy, I drew cartoons in Flash together with a friend, who criticized me for
using a primitive color palette, such as <code>#F00</code> for red or <code>#0F0</code> for blue. I can&#39;t imagine myself doing that now, but
at that time I was quite content with those acid colors — in fact, a mere color abbreviation: &quot;this is blue&quot;,
&quot;this is red&quot;. I prefer to blame the default (ordinary) Flash editor palette, as it didn&#39;t inspire one to look for new
and uncommon color combinations.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*kunb6fFJzaxdPCvDdL4nCQ.jpeg"/></p><p class="text__p">A couple of drawing lessons would have done me good. I could have learned about the color wheel and HSV-model.
Unfortunately, I didn&#39;t have time for that, so I learned about colors in my physics class at school while studying
stuff like light wave spectrum. A special thanks goes to my friend, too.</p><p class="text__p">An <a href="http://whoyougle.ru/services/color">interface example</a> from my first job:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*SG-gWiaq9rK51ToEPQN6fQ.png"/></p><div class='article__tip'> 
The selected color is named <b>Dove-coloured</b>, and aside you can see a list of resembling colors with their names.
</div>

<p class="text__p">For some time I was even considering a career in illustration. For that purpose, I downloaded all the issues of the
2D-Artist Magazine, and went through drawing tutorials step-by-step: fantasy, anime, animals with thick fur, snow on
the tree branches, and many others. This isn&#39;t too hard when you get to drawing your 10th wolf or 20th tree. Drawing
something out of your head is much more difficult — one needs practice, a lot of it.</p><p class="text__p">Experimenting with Photoshop brushes:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*DYns-3bPVCjSVGgDHtLTnA.png"/></p><p class="text__p">Finding my own style:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*wJyCyAH3u-NWB7bZ40j08Q.png"/></p><p class="text__p">However, I didn&#39;t earn my first money by drawing stuff. I got paid for designing a web interface for a popular science
portal, Whoyougle — quite a quirk of fate, wasn&#39;t it? That helped me shift my focus towards what I still do these days.</p><p class="text__p"><a href="http://whoyougle.ru/services/dogs">The above-mentioned interface</a>: visual dog breed selector</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*8d_S6hCvvCmwiRLJg0sCzw.png"/></p><div class="article__tip">
The picture demonstrates an interface to model a dog by defining properties of its parts like muzzle, ears, body, paws,
and tail.
</div>

<p class="text__p">I didn&#39;t stop sketching, but it became more conceptual: icons, schemes and various constructions composed of different
shapes.</p><p class="text__p">Yandex services&#39; logos and icons: pieces of a unified ecosystem</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*6N5iJk8dicACqGMiI2zEdA.png"/></p><div class="article__tip">
Icons: Auto Navigator, Maps, Disk (cloud storage).
</div>

<p class="text__p">A MacOS browser fantasy:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*Da1S2lHmz-bw5JsCXH7Eiw.png"/></p><p class="text__p">A shaped emotion. A message in a well-defined system.</p><p class="text__p">So, as a visual designer, do you need drawing/sketching skills? This is how I would answer this question: you have to
feel shape and form to find effective means of expression for a given context and expand those to a broader set of
cases. I think I didn&#39;t learn how to sketch properly, but I can &quot;catch&quot; the shape I need — sometimes, after a dozen
cmd+Z keystrokes.</p><p class="text__p">If foundation of a product form was laid out by someone else, do not start thinking about rebuilding it all from
scratch, but rather try to understand the system and see if you can carry on with it. The same, I think, applies to
interior design: you don&#39;t have to create the items yourself, yet finding a balanced combination is essential, as well
as extending the existing combination whenever necessary.</p><p class="text__p">Google&#39;s brand action buttons:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*WMVseMDKhlEHbb9F5pjZMA.png"/></p><p class="text__p">The Like icon uses a recognizable shade of blue and familiar Facebook style</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*_MHgKOoHri0DsT663IIyfQ.png"/></p><p class="text__p">Yandex.Money logo: as sharp and yellow as the search form on its main page</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*Vw-E9-COuAwfBerQfj-N8A.png"/></p><p class="text__p">A Windows 8 logo is an introduction to the OS style</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*kb9PDJOfuOICxRHXU-hliw.png"/></p><p class="text__p">All visual features of iOS7, packed into one icon</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*G__j5kCIz1sNFYDtezQEFw.png"/></p><p class="text__p">Form expresses the mood of an interface, its own nature. Form is a &quot;coordinate system&quot; in which the means of expression
must evolve. It shapes the first product impression and leaves a distinctive footprint in memory, thus being a valued
characteristic of any product.</p><hr>
<p class="text__p">Color is a detachable part of the form. It emphasizes the unity of various elements on the screen, highlights key
points, creates a recognizable image. Color is usually extracted from a logo or a predominant visual.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*e4AAtApZftYamtdKZA5S_Q.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*AAuzaO3dxe-qkywagiZYtA.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*XweyY0O9-JQrOKn5_3ZOFQ.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*hmoTNpTvM4Dbhks8Oq5EKQ.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*Jf2I2FwE4kQr1AwnzGNIMw.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*8va2qDAAJxq52MwTKoRzmQ.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*tJSowLjIcP-moI-uHAqM8Q.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*kGrDDiWH-tIYZxvt7OT6-g.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*2e6A2ugcf8u_yBwgsO_QkQ.png"/></p><hr>
<p class="text__p">Font is also a form, and that means it can be unique and important asset of a product.</p><p class="text__p">VK.com chose the &quot;system&quot; Tahoma font that is seldom used on the Web, and those recognizable small letters got
associated with their product.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*TFtXvkt64XFRrYw-H0CSJA.png"/></p><p class="text__p">Had they chosen Arial instead, the set of unique features could have been less pronounced:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*RNgZ9z9d944mv3VrgFD_sQ.png"/></p><p class="text__p">MacOS interfaces are instantly recognizable thanks to rounded lowercase letters and contrasting capitals of the
Lucida Grande font:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/782/1*xpO4PnKBo-H3o1S1paaziw.png"/></p><p class="text__p">I&#39;m pretty sure anyone would recognize this OS thanks to Roboto:</p><p class="text__p">Hint: &quot;A&quot; is the first letter</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*lfjqZRtmRPwsoBPo2sh5tw.png"/></p><p class="text__p">My colleague cracked a joke once: &quot;In our ads, we put bare text where others would place a naked woman&quot;. The Textbook
font face had been associated with the Yandex brand for quite some time.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*T3_p0ddSbc8atXK7WOG79Q.jpeg"/></p><div class="article__tip">
The billboard advertises Yandex.Maps. They show their headquarter address (Lv. Tolstoy str, Moscow) as an example.
</div>

<p class="text__p">In other words, even non-designers associate a font with a brand. The shape of letters is equally important as the logo
shape or color; when a logo drops out of sight or brand identity color can&#39;t be used, we still have the font.</p><hr>
<p class="text__p">Why do I put so much emphasis on the product identity? All these properties — form, color or font — define frames and
guidelines one should follow to make the product stand out in the market. They help us avoid stylistical uncertainty
and focus on the content.</p><h2 class="text-header text-header_lvl_2" id="content"><a href="#content" class="text-header__anchor">Content</a></h2><p class="text__p">Any interface is also an element hierarchy. Using shape, size, color, alignment and context, we separate primary
elements from secondary ones, content that can be omitted from content that deserves user&#39;s attention.</p><p class="text__p">Text also has a hierarchical structure: headings, subheadings, paragraphs, nested lists. Inside any text, there are more important and less important things. Many actions applicable to an interface can also be applied to texts: we can improve it, make it comprehensible, more interesting, shorter, disambiguate it etc.</p><p class="text__p">Text is a special case of a data model, and a data model is used to build an interface around it. Let&#39;s make one step
back to see how the product visualization process happens. Here&#39;s a simple example: an interface for a new e-mail
message form. We start by formally defining the incoming data model:</p><pre class="highlight i-bem" data-bem='{ "highlight": {} }'><code>Message
  From
    address
  To
    address1
    address2
    ...
  Copy
    address1
    address2
    ...
  Subject
  Date
  Content
    Text
    Images
    ...
  Actions
    Translation
    Options</code></pre><p class="text__p">The interface is built on top the data. There is one model with multiple possible representations. One of those is, in
our case, the new message form:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*P09dV9gJUKfeQ9thE6goEA.png"/></p><div class="article__tip">
Input fields at the top: To and Subject. Controls at the bottom: Options (selector), Attach, Translate, and Send.
</div>

<p class="text__p">&quot;From&quot; and &quot;Date&quot; fields were put aside, and &quot;CC&quot; was moved into Options. Using the same model, we can create a couple
of extra representations: the message itself, and its shortened version in the thread selection column.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*u_8KVPOlyCduP8_0dU6zvg.png"/></p><p class="text__p">Thus, designer has to study the data model thoroughly before starting to create a representation (interface).</p><p class="text__p">The statement above may sounds unconvincing as the supporting example is quite primitive. Here is something else.
I&#39;ve already mentioned that I worked for a popular science web resource as a developer and, later, as a designer.
During that time, I had to read many articles on nutrition and diets, and collect the necessary data about
<a href="http://wyg.su/js/services/food.data.js?f4033cc">360</a> essential products, only to create this
<a href="http://whoyougle.ru/services/food">nutrition calculator</a>.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*IkrVskq3GWOPSPmmb3z94g.png"/></p><div class="article__tip">
A user is suggested calorie content to consume daily (3050 kcal). Below they can add eaten pieces of food and their
weight to get the actual amount of gotten calories.
</div>

<p class="text__p">To design an <a href="http://whoyougle.ru/services/fitness">online fitness guide</a>, I had to read a small book on physical
excercise.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*RtWcfP05m97a4YrDHA-pIQ.png"/></p><div class="article__tip">
With defining a gender and selecting muscles you get a suitable workout.
</div>

<p class="text__p">The model of incoming data is often poorly or vaguely defined, and it&#39;s a designer&#39;s responsibility to formalize
and finalize it.</p><hr>
<p class="text__p">For a promo screen, input data is the marketing idea to highlight certain product features, or change the way customers
perceive the product. It would be a terrible mistake for a designer to create a so-called &quot;draft design&quot; which is
filled in with text later — most likely, by a third party. Designer and copyrighter have to work together, combining
words and graphics into a holistic experience, so that the result looks like this:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1019/1*bXjq7gmQVdNgU_YA0PYenA.png"/></p><p class="text__p">...and not like this:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/978/1*th_M1iFJVwnTrMIXP1UDpg.png"/></p><div class="article__tip">
The title: From the bottom of our hearts.
</div>

<p class="text__p">The whole Internet is filled over with the same layout (&quot;image + text&quot;):</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*s8k1k4cJTm9Dg4p41_rSPg.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*TA9s1vrcyBKHHFr0bUM8dA.png"/></p><p class="text__p">The designer&#39;s creativity can transform this info something bigger and better:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*qz3ZwMVkDC6lvNDs61tzpQ.png"/></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*aLxI5oeOi_6t_kbisFo3Yw.jpeg"/></p><div class="article__tip">
Crumpled paper refers to <em>Love is</em> bubble gum insert. &quot;Loving Porsche Cayenne is the same as loving
Lost TV series, American P book by B I E, BC movie, and Lady Gaga.&quot;
</div>

<p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*RfvzAWMJUX3h1rVDFncTeQ.png"/></p><div class="article__tip">
The title: Glaringly fast. In Russian &quot;glaringly&quot; and &quot;call for a taxi&quot; sound the same.
</div>

<p class="text__p">...or not:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*KUPy0NUcAUQGF5QXXRyokw.png"/></p><div class="article__tip">
The text extols Opera web browser.
</div>

<p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/773/1*_h40yfy02gJPrbsyv8-kUQ.png"/></p><div class="article__tip">
A lot of small letters trying to advertise Samsung Galaxy S4.
</div>

<h2 class="text-header text-header_lvl_2" id="system"><a href="#system" class="text-header__anchor">System</a></h2><p class="text__p">Not every designer had that experience of providing long term support for a complicated product. Even less people can
claim they helped shape the initial idea from the very beginning. This is probably the reason why the systematic
approach (one that involves data structures, logical schemes, complicated prototypes) doesn&#39;t have that much
credibility or support.</p><p class="text__p">How many designers would be able to list all the types and states of the buttons they&#39;re using in the interface they
work with? Can they remember the sizing scale: what is the height of a small button, a medium one, a large one?</p><p class="text__p">I always liked to play with Lego pieces, trying to combine then in different ways. Sometimes it looked like its
creators themselves didn&#39;t know all the possible combinations but just followed a set of strict rules, and because of
that, those pieces of plastic are interlocking in many different combinations, allowing for infinite number of
complicated objects to be built from a finite set of simple elements.</p><p class="text__p">How did I connect this Lego principle with the interface domain? Here&#39;s a simple button:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*g3V7GqVo0pm8iq3QkxlzGA.png"/></p><p class="text__p">The button has states, a lot of them:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*SkgKu9v5vakjz2II84SZQQ.png"/></p><p class="text__p">The systematic approach has a feature: in the very beginning, you have to work a lot, to get plenty of bonuses later.</p><p class="text__p">From several buttons glued together one can assemble a radio group:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*6_qyP2tbJrrzLywGUAsDoQ.png"/></p><p class="text__p">The dropdown list is a special button type:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*C2HY_hyYiSFlGHmO18zBfA.png"/></p><p class="text__p">A slider is made from that very button:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*1-YWL_LVHIZzqkEyuRC4Sw.png"/></p><p class="text__p">A switch is a white button inside a checked button:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*um8yz1_OdpKiOabDTLAncQ.png"/></p><p class="text__p">Checkbox is a checked button with a tick:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*gBhotZOIxW5Mlf5Xo_JTEw.png"/></p><p class="text__p">Compound elements evolve from simple ones (another simple element is a text entry field). This is how you get a search form:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*l2OigbMS457aC4ijEfIIVg.png"/></p><p class="text__p">A combobox:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*8QSp9NPXjlGuJbREGS-5_w.png"/></p><p class="text__p">A payment form:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*9oQ8KeDPIhaWMuBHWeohYA.png"/></p><p class="text__p">Sometimes we have to highlight a form element (e.g. to point out an input error). A contrast popup can be used for this:</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*aMpfoFUQPbbz1QH9Y-P38g.png"/></p><p class="text__p">A sizing scale has been defined before: 24, 28, and 32 px. All the controls (from a button to a slider) have this
height already, and it would be logical to have popups aligned along the same scale. Thus, popups in a form, even if
displayed next to each field, won&#39;t conflict with each other, and all the elements will align themselves horizontally
and vertically.</p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*OlJV9QaWwfiR4iFKQpA9jg.png"/></p><p class="text__p">Element paddings can also be defined within the same scale. I set those to be either 6, 10, 16 or 20 px, so that each
of them is divisible by two.</p><p class="text__p">On the one hand, this keeps yourself organized and helps a lot. On the other hand, as the system grows, means of
expression also grow, more elements and modifications are added, connections between elements become complicated, and
the model gets more difficult to maintain. These details are too subtle; graphic editor software won&#39;t take care of
that, so a lot has to be kept just in your head. Communicating the system to another person is hard as a lot of details
are hard to explain or simply get lost, and after some time, you the designer start forgetting about some of those
details, too.</p><p class="text__p">I&#39;ll explain once more why it is so complicated. Imagine a search interface that has to give an answer to any query or
question. That answer comes not as simple hyperlinks or text, but as objects, video, music player, images, maps,
phone numbers and addresses, goods with price tags and &quot;buy now&quot; buttons, ads, forms, calculators and converters,
graphs and counters. Now imagine that every answer is interactive: you can touch it and it expands, or shows a new
block on the side. This is only the main search interface. There are also specialized search interfaces for video,
images, music, maps, goods, people, news, dictionaries, cars and so on — all these have to work in a way similar to
the main search, but also add some unique features and experience. There are also standalone services which have to
look and feel like the main search, but... at this point you&#39;ve got my idea, right?</p><p class="text__p">An instrument is needed that would allow for controlling the system without exponentially increasing the price of
adding new components. However, Titanic (for example) was perfectly controllable — without much success. Actually,
I prefer the term &quot;juggling&quot; instead of &quot;controlling&quot;.</p><p class="text__p">I see my colleagues constantly looking for a silver bullet in a graphical interface. In inDesign, one finds text style
classes; Axure allows a prototype to be built from a series of screens; Sketch supports object libraries and builds
screens from object copies. Each tool reaches its limits sooner or later: an editor won&#39;t support behavior definitions,
and a prototyping environment won&#39;t have support for an object library or any other dynamic actions except for
switching between the screens.</p><p class="text__p">Instead of those limits, I see endless possibilities as vast as the outer space. The closer to the stars I fly,
the bigger the universe seems to be. The first insight happens when you learn HTML. Working with lists, huge texts
and tables finally becomes comfortable: there are many settings to play with to achieve the ideal balance, test
various representations with different data and minimal effort.</p><p class="text__p">During interviewing and hiring process, we at Yandex sometimes ask people to send us a prototype of a beautiful table
representing data on 170 employees or a couple of documentation pages with paragraphs and subsections, code examples,
lists, method tables and other formatting. Some candidates manually arrange 170 portraits in Photoshop, to make it
look outstanding, other ones write a script to fill the same layout with different data on 170 people from their
Facebook friend list. These two kinds of candidates are equally interesting for us.</p><hr>
<p class="text__p">Are you sure your project won&#39;t grow to that level of complexity? Should you avoid this complexity at all, or is it a
just a level-up? How could you be possibly sure that your project won&#39;t get two dozen extra screens in a couple of
months? If you work with a flow of similar clients (corporate clients, for example), do you ever consider factoring out
common interface elements? Did you ever trust a different designer on your team with creating some follow-up screens
for your own project?</p><p class="text__p">I won&#39;t be showcasing examples of code that save hours and hours of manual work, as sharing another link to CSS and
JavaScript resources these days is redundant, to say the least. What I&#39;m trying to emphasize is that this might be
the new perspective, the new way to expand your knowledge and expertise. Learn development tools not to prove that
you are smarter then other, not to aquire another skill, not to understand programmers&#39; humor better, but only to hit
the limit and break out of it, into the outer space of possibilities.</p><h2 class="text-header text-header_lvl_2" id="critics"><a href="#critics" class="text-header__anchor">Critics</a></h2><p class="text__p">How would you recognize a good design? I already mentioned some of the key factors: clear and emotionally defined form,
visual language, systematic approach. Each of the factors has to follow the product&#39;s goal. A good design features
unified, carefully chosen and well-integrated forms where key points are highlighted by means of words or shapes.
As a result, the message should be clear and comprehensible.</p><hr>
<p class="text__p">This is a thing from another planet, it does magic:
<a href="http://www.apple.com/mac-pro/">http://www.apple.com/mac-pro/</a></p><p class="text__p"><img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/954/1*E_pE2JntAgLroox_DP7D0Q.png"/></p><p class="text__p">Loosen reader&#39;s critical filters before he starts reading the article:
<a href="http://w-o-s.ru/article/8597">http://w-o-s.ru/article/8597</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/897/1*HP0qRilpHKkXQrdAjoJ9CA.png"/></p><p class="text__p">We&#39;ve got a visitor, now engage him — at any cost, so shoot with all the guns:
<a href="https://www.facebook.com/">https://www.facebook.com/</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1280/1*sy1Ok2BkNOnVeC9GxQw3Eg.png"/></p><p class="text__p">We have a lot of music for you, please enter:
<a href="http://zvooq.ru/">http://zvooq.ru/</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1317/1*-ervJAOfnKBk-uw9tWuAPg.png"/></p><p class="text__p">You are about to finish with this one, we have similar stuff released this year:
<a href="http://www.youtube.com/watch?v=VCTen3-B8GU">http://www.youtube.com/watch?v=VCTen3-B8GU</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1036/1*PxHN2Co-uxEJhHO3Pz75nA.png"/></p><p class="text__p">We know so much more... feel free to ask!
<a href="http://yandex.ru/yandsearch?lr=213&amp;text=%D0%BA%D1%83%D1%80%D1%81+%D0%B4%D0%BE%D0%BB%D0%BB%D0%B0%D1%80%D0%B0&amp;nl=1">currency exchange rate</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/781/1*-MOotBTxU597ZWyFA7aWHw.png"/></p><p class="text__p">Let&#39;s see some pictures; we promise you won&#39;t get bored:
<a href="http://www.pinterest.com/">http://www.pinterest.com/</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1248/1*3uaWDcR9_VgQQ0CQ52G95Q.png"/></p><p class="text__p">Just point your finger at the style you like:
<a href="http://bangbangstudio.ru/illustrations">http://bangbangstudio.ru/illustrations</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1000/1*jxhNQ8C5GFHQYYHJdJrzsQ.png"/></p><p class="text__p">If you see another beautiful bulding in Kiev, it&#39;s likely we who built it:
<a href="http://www.zhytlobud.com/ru/buildings/kiev/">http://www.zhytlobud.com/ru/buildings/kiev/</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/1308/1*uLzBMaI2-4w5GpEZXanU_w.png"/></p><p class="text__p">You just saved one hour of your life:
<a href="http://www.yandex.ru/">http://www.yandex.ru/</a>
<img class="text-image i-bem" data-bem='{ "text-image": {} }'  src="https://d262ilb51hltx0.cloudfront.net/max/800/1*SnZTZmMkqiuDYIesB9Mazg.png"/></p><p class="text__p">That&#39;s it.</p><p class="text__p">I hope you learned something new about interfaces and things we do at Yandex, and also about things my colleagues
around the world do for other projects. I hope you find it interesting.</p>]]></description>
            <link>http://frontendbabel.info/articles/graphical-interface</link>
            <guid isPermaLink="true">http://frontendbabel.info/articles/graphical-interface</guid>
            <dc:creator><![CDATA[Danil Kovchy]]></dc:creator>
            <pubDate>Mon, 30 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[SVG: Grouping and Re-using Elements]]></title>
            <description><![CDATA[<p class="text__p">SVG-figures can be grouped to structure a file in more convenient manner. There are several tags for this purpose:
<code>&lt;g&gt;</code>, <code>&lt;defs&gt;</code> and <code>&lt;symbol&gt;</code>. Elements, element groups and symbols can be used repeatedly.</p><!-- cut -->

<h2 class="text-header text-header_lvl_2" id="g"><a href="#g" class="text-header__anchor">g</a></h2><p class="text__p">The <code>&lt;g&gt;</code> tag serves for grouping figures semantically, for maintaining a transparent document structure.
Groups of elements can be used repeatedly.</p><svg width="275" height="100">
  <!-- Group 1  -->
  <g id="to-sun">
    <circle fill="purple" r="20" cx="25" cy="25"/>
    <circle fill="crimson" r="20" cx="70" cy="25"/>
    <circle fill="red" r="20" cx="115" cy="25"/>
    <circle fill="orange" r="20" cx="160" cy="25"/>
    <circle fill="gold" r="20" cx="205" cy="25"/>
    <circle fill="yellow" r="20" cx="250" cy="25"/>
  </g>
  <!-- Group 2 -->
  <g id="to-night">
    <circle fill="greenyellow" r="20" cx="25" cy="70"/>
    <circle fill="yellowgreen" r="20" cx="70" cy="70"/>
    <circle fill="green" r="20" cx="115" cy="70"/>
    <circle fill="steelblue" r="20" cx="160" cy="70"/>
    <circle fill="darkviolet" r="20" cx="205" cy="70"/>
    <circle fill="purple" r="20" cx="250" cy="70"/>
  </g>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="275" height="100">
  &lt;!-- Group 1  -->
  &lt;g id="to-sun">
    &lt;circle fill="purple" r="20" cx="25" cy="25"/>
    &lt;circle fill="crimson" r="20" cx="70" cy="25"/>
    &lt;circle fill="red" r="20" cx="115" cy="25"/>
    &lt;circle fill="orange" r="20" cx="160" cy="25"/>
    &lt;circle fill="gold" r="20" cx="205" cy="25"/>
    &lt;circle fill="yellow" r="20" cx="250" cy="25"/>
  &lt;/g>
  &lt;!-- Group 2 -->
  &lt;g id="to-night">
    &lt;circle fill="greenyellow" r="20" cx="25" cy="70"/>
    &lt;circle fill="yellowgreen" r="20" cx="70" cy="70"/>
    &lt;circle fill="green" r="20" cx="115" cy="70"/>
    &lt;circle fill="steelblue" r="20" cx="160" cy="70"/>
    &lt;circle fill="darkviolet" r="20" cx="205" cy="70"/>
    &lt;circle fill="purple" r="20" cx="250" cy="70"/>
  &lt;/g>
&lt;/svg></code></pre><p class="text__p">Groups, like figures, can be given fills and strokes. The style will work for figures inside groups, which
don&#39;t have their own style:</p><svg width="170" height="50">
  <!-- Red Figures -->
  <g id="to-sun" fill="tomato">
    <ellipse rx="30" ry="10" cx="25" cy="25"
             transform="rotate(-45 25 25)"/>
    <ellipse rx="30" ry="10" cx="105" cy="25"
             transform="rotate(-45 105 25)"/>
  </g>
  <!-- Blue Figures -->
  <g id="to-sun" fill="skyblue">
    <ellipse rx="30" ry="10" cx="65" cy="25"
             transform="rotate(45 65 25)"/>
    <ellipse rx="30" ry="10" cx="145" cy="25"
             transform="rotate(45 145 25)"/>
  </g>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="170" height="50">
  &lt;!-- Red Figures -->
  &lt;g id="to-sun" fill="tomato">
    &lt;ellipse rx="30" ry="10" cx="25" cy="25"
             transform="rotate(-45 25 25)"/>
    &lt;ellipse rx="30" ry="10" cx="105" cy="25"
             transform="rotate(-45 105 25)"/>
  &lt;/g>
  &lt;!-- Blue Figures -->
  &lt;g id="to-sun" fill="skyblue">
    &lt;ellipse rx="30" ry="10" cx="65" cy="25"
             transform="rotate(45 65 25)"/>
    &lt;ellipse rx="30" ry="10" cx="145" cy="25"
             transform="rotate(45 145 25)"/>
  &lt;/g>
&lt;/svg></code></pre><p class="text__p">Groups don&#39;t work like included elements in HTML, but more like groups of elements in visual editors.</p><p class="text__p">Groups don&#39;t show themselves visually, but can be used for grouping operations on their contents: it&#39;s possible
to apply transformations for a group of elements, with no need to move each one, it&#39;s possible to set a visual
theme to the whole group at once; all the elements inside the group inherit the given style. Additionally, properties
of the group are added to the inner elements, without overwriting their own ones. For example, if an element has a red
fill, but the group has a green one — the fill of the element remains red.</p><p class="text__p">For an element to inherit the visual properties of the group, it can&#39;t have properties of its own.</p><h2 class="text-header text-header_lvl_2" id="defs"><a href="#defs" class="text-header__anchor">defs</a></h2><p class="text__p">The <code>&lt;defs&gt;</code> tag acts as a library of elements and effects, which can be used later. The contents of the tag
are not shown on the page.</p><svg width="200" height="200">
  <!-- Hidden container for effects and figures -->
  <defs>
    <!-- Group of gradients -->
    <g>
      <linearGradient id="g1" x1="0%" y1="0%" x2="90%" y2="90%">
        <stop stop-color="crimson" offset="0%"/>
        <stop stop-color="gold" offset="100%"/>
      </linearGradient>
      <linearGradient id="g2" x1="0%" y1="0%" x2="90%" y2="90%">
        <stop stop-color="yellowgreen" offset="0%"/>
        <stop stop-color="green" offset="100%"/>
      </linearGradient>
    </g>
    <!-- Group of figures, not shown on the page -->
    <g>
      <circle fill="url(#g1)" r="50" id="sun"/>
      <rect width="200" height="70" id="rect" fill="url(#g2)"/>
    </g>
  </defs>

  <!-- Usage of the figures -->
  <use xlink:href="#sun" x="120" y="60"/>
  <use xlink:href="#rect" x="0" y="110" transform="rotate(10 100 110)"/>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="200" height="200">
  &lt;!-- Hidden container for effects and figures -->
  &lt;defs>
    &lt;!-- Group of gradients -->
    &lt;g>
      &lt;linearGradient id="g1" x1="0%" y1="0%" x2="90%" y2="90%">
        &lt;stop stop-color="crimson" offset="0%"/>
        &lt;stop stop-color="gold" offset="100%"/>
      &lt;/linearGradient>
      &lt;linearGradient id="g2" x1="0%" y1="0%" x2="90%" y2="90%">
        &lt;stop stop-color="yellowgreen" offset="0%"/>
        &lt;stop stop-color="green" offset="100%"/>
      &lt;/linearGradient>
    &lt;/g>
    &lt;!-- Group of figures, not shown on the page -->
    &lt;g>
      &lt;circle fill="url(#g1)" r="50" id="sun"/>
      &lt;rect width="200" height="70" id="rect" fill="url(#g2)"/>
    &lt;/g>
  &lt;/defs>

  &lt;!-- Usage of the figures -->
  &lt;use xlink:href="#sun" x="120" y="60"/>
  &lt;use xlink:href="#rect" x="0" y="110" transform="rotate(10 100 110)"/>
&lt;/svg></code></pre><h2 class="text-header text-header_lvl_2" id="symbol"><a href="#symbol" class="text-header__anchor">symbol</a></h2><p class="text__p">A symbol is a group of figures, all part of a single whole. Like a <code>&lt;def&gt;</code>, not shown on the page, and like
the <code>&lt;g&gt;</code>, can be used again. Inside a symbol is a new coordinate system.</p><svg width="240" height="170">
  <defs>
    <g>
      <circle fill="gold" r="30" id="yellowball"/>
    </g>
    <!-- Symbol Description -->
    <symbol id="mouth">
      <polyline points="15 15 5 10 15 5" stroke="crimson" fill="none" stroke-width="3"/>
    </symbol>
    <!-- Symbol Description -->
    <symbol id="bird">
      <g stroke="brown">
        <polyline points="0 0 0 25" stroke-width="3" transform="translate(25 100)"/>
        <polyline points="0 0 0 25" stroke-width="3" transform="translate(45 100)"/>
        <polyline points="0 0 12 0" stroke-width="3" transform="translate(19 125)"/>
        <polyline points="0 0 12 0" stroke-width="3" transform="translate(40 125)"/>
      </g>
      <use xlink:href="#mouth" x="83" y="35"/>
      <use xlink:href="#yellowball" x="90" y="55" transform="scale(.75)"/>
      <use xlink:href="#yellowball" x="35" y="75" width="100"/>
      <polyline points="55 70 45 90 20 80" stroke="orange" stroke-width="3" fill="none"/>
      <circle fill="black" r="5" cx="75" cy="35"/>
      <circle fill="gray" r="1" cx="77" cy="35"/>
    </symbol>
  </defs>

  <!-- Symbol Usage -->
  <use xlink:href="#bird" x="15" y="15"/>
  <!-- Using the symbol again, flipping horizontally -->
  <use xlink:href="#bird" x="0" y="35" transform="translate(225 -20) scale(-1,1)"/>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="240" height="170">
  &lt;defs>
    &lt;g>
      &lt;circle fill="gold" r="30" id="yellowball"/>
    &lt;/g>
    &lt;!-- Symbol Description -->
    &lt;symbol id="mouth">
      &lt;polyline points="15 15 5 10 15 5" stroke="crimson" fill="none" stroke-width="3"/>
    &lt;/symbol>
    &lt;!-- Symbol Description -->
    &lt;symbol id="bird">
      &lt;g stroke="brown">
        &lt;polyline points="0 0 0 25" stroke-width="3" transform="translate(25 100)"/>
        &lt;polyline points="0 0 0 25" stroke-width="3" transform="translate(45 100)"/>
        &lt;polyline points="0 0 12 0" stroke-width="3" transform="translate(19 125)"/>
        &lt;polyline points="0 0 12 0" stroke-width="3" transform="translate(40 125)"/>
      &lt;/g>
      &lt;use xlink:href="#mouth" x="83" y="35"/>
      &lt;use xlink:href="#yellowball" x="90" y="55" transform="scale(.75)"/>
      &lt;use xlink:href="#yellowball" x="35" y="75" width="100"/>
      &lt;polyline points="55 70 45 90 20 80" stroke="orange" stroke-width="3" fill="none"/>
      &lt;circle fill="black" r="5" cx="75" cy="35"/>
      &lt;circle fill="gray" r="1" cx="77" cy="35"/>
    &lt;/symbol>
  &lt;/defs>

  &lt;!-- Symbol Usage -->
  &lt;use xlink:href="#bird" x="15" y="15"/>
  &lt;!-- Using the symbol again, flipping horizontally -->
  &lt;use xlink:href="#bird" x="0" y="35" transform="translate(225 -20) scale(-1,1)"/>
&lt;/svg></code></pre><h2 class="text-header text-header_lvl_2" id="use"><a href="#use" class="text-header__anchor">use</a></h2><p class="text__p">This is a tag allowing re-use SVG-elements. It&#39;s possible to copy any element inside a single HTML page. It&#39;s
also possible to include a library of elements at the beginning of a page and later use them in the necessary places.</p><p class="text__p">The copies can be given positions, widths and heights:</p><svg width="260" height="140">
  <defs>
    <!-- Symbol Creation -->
    <symbol id="color-wheel">
      <circle r="50" fill="gold" cx="50" cy="50"/>
      <circle r="35" fill="orangered" cx="50" cy="50"/>
      <circle r="20" fill="crimson" cx="50" cy="50"/>
      <circle r="5" fill="maroon" cx="50" cy="50"/>
     </symbol>
  </defs>

  <!-- Symbol copy with coordinates -->
  <use xlink:href="#color-wheel" x="20" y="20"/>
  <!-- Symbol copy with coordinates and height -->
  <use xlink:href="#color-wheel" x="140" y="20" height="50"/>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="260" height="140">
  &lt;defs>
    &lt;!-- Symbol Creation -->
    &lt;symbol id="color-wheel">
      &lt;circle r="50" fill="gold" cx="50" cy="50"/>
      &lt;circle r="35" fill="orangered" cx="50" cy="50"/>
      &lt;circle r="20" fill="crimson" cx="50" cy="50"/>
      &lt;circle r="5" fill="maroon" cx="50" cy="50"/>
     &lt;/symbol>
  &lt;/defs>

  &lt;!-- Symbol copy with coordinates -->
  &lt;use xlink:href="#color-wheel" x="20" y="20"/>
  &lt;!-- Symbol copy with coordinates and height -->
  &lt;use xlink:href="#color-wheel" x="140" y="20" height="50"/>
&lt;/svg></code></pre><p class="text__p">The position of the copy is determined with respect to the top left corner of the figure in the existing
coordinate system. However, the coordinate system within the symbol is its own.</p><p class="text__p">On insertion of a symbol, the <code>width</code> and <code>height</code> determine not the size of the figure, but the visible area of
the copy (like in the figure on the right), however when copying a group (<code>&lt;g&gt;</code>) the height and width don&#39;t affect
anything. Use transformations to change the sizes of copies.</p><p class="text__p">It&#39;s also possible to give strokes, fills and transformations:</p><svg width="260" height="140">
  <defs>
    <!-- Original symbol, not shown -->
    <symbol id="s-rect">
      <rect width="100" height="25" x="2" y="2"/>
     </symbol>
  </defs>

  <!-- Simple copy, the background is black by default -->
  <use xlink:href="#s-rect" x="20" y="20"/>
  <!-- Adding width and fill -->
  <use xlink:href="#s-rect" x="140" y="20"
       width="50" fill="yellowgreen"/>
  <!-- Adding fill and stroke -->
  <use xlink:href="#s-rect" x="20" y="80"
       fill="gold" stroke="orange" stroke-width="4"/>
  <!-- Adding fill, stroke and transform -->
  <use xlink:href="#s-rect" x="140" y="80"
       fill="skyblue" stroke="steelblue" stroke-width="2"
       transform="rotate(-25 190 92)"/>
</svg>

<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="260" height="140">
  &lt;defs>
    &lt;!-- Original symbol, not shown -->
    &lt;symbol id="s-rect">
      &lt;rect width="100" height="25" x="2" y="2"/>
     &lt;/symbol>
  &lt;/defs>

  &lt;!-- Simple copy, the background is black by default -->
  &lt;use xlink:href="#s-rect" x="20" y="20"/>
  &lt;!-- Adding width and fill -->
  &lt;use xlink:href="#s-rect" x="140" y="20"
       width="50" fill="yellowgreen"/>
  &lt;!-- Adding fill and stroke -->
  &lt;use xlink:href="#s-rect" x="20" y="80"
       fill="gold" stroke="orange" stroke-width="4"/>
  &lt;!-- Adding fill, stroke and transform -->
  &lt;use xlink:href="#s-rect" x="140" y="80"
       fill="skyblue" stroke="steelblue" stroke-width="2"
       transform="rotate(-25 190 92)"/>
&lt;/svg></code></pre><p class="text__p">Different CSS classes can be applied for the copies:</p><svg width="260" height="50">
  <style>
 .col-1 {
    fill: #F35C78;
    }
  .col-2 {
    fill: #E77D6D;
    }
  .col-3 {
    fill: #D99B64;
    }
  .col-4 {
    fill: #C8B357;
    }
  .col-5 {
    fill: #B2CC49;
    }
  </style>

  <defs>
    <!-- House -->
    <path id="house" d="M32 18.451l-16-12.42-16 12.42v-5.064l16-12.42 16 12.42zM28 18v12h-8v-8h-8v8h-8v-12l12-9z"/>
  </defs>

  <!-- House copy -->
  <use xlink:href="#house"
       class="col-1" x="20" y="10"
       transform="rotate(35 36 26)"/>
  <use xlink:href="#house"
       class="col-2" x="67" y="10"
       transform="rotate(100 83 26)"/>
  <use xlink:href="#house"
       class="col-3" x="114" y="10"
       transform="rotate(140 130 26)"/>
  <use xlink:href="#house"
       class="col-4" x="161" y="10"
       transform="rotate(30 177 26)"/>
  <use xlink:href="#house"
       class="col-5" x="208" y="10"
       transform="rotate(100 224 26)"/>
</svg>

<p class="text__p">House is from <a href="http://icomoon.io">icomoon.io</a></p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "xml"} }'><code>&lt;svg width="260" height="50">
  &lt;style>
 .col-1 {
    fill: #F35C78;
    }
  .col-2 {
    fill: #E77D6D;
    }
  .col-3 {
    fill: #D99B64;
    }
  .col-4 {
    fill: #C8B357;
    }
  .col-5 {
    fill: #B2CC49;
    }
  &lt;/style>

  &lt;defs>
    &lt;!-- House -->
    &lt;path id="house"
          d="M32 18.451l-16-12.42-16 12.42v-5.064l16-12.42 16 12.42zM28 18v12h-8v-8h-8v8h-8v-12l12-9z"/>
  &lt;/defs>

  &lt;!-- House copy -->
  &lt;use xlink:href="#house"
       class="col-1" x="20" y="10"
       transform="rotate(35 36 26)"/>
  &lt;use xlink:href="#house"
       class="col-2" x="67" y="10"
       transform="rotate(100 83 26)"/>
  &lt;use xlink:href="#house"
       class="col-3" x="114" y="10"
       transform="rotate(140 130 26)"/>
  &lt;use xlink:href="#house"
       class="col-4" x="161" y="10"
       transform="rotate(30 177 26)"/>
  &lt;use xlink:href="#house"
       class="col-5" x="208" y="10"
       transform="rotate(100 224 26)"/>
&lt;/svg></code></pre><p class="text__p">A well-structured file makes development faster and more comfortable, and copying symbols can make
code significantly shorter.</p><h3 class="text-header text-header_lvl_3" id="links-on-the-same-topic"><a href="#links-on-the-same-topic" class="text-header__anchor">Links on the Same Topic</a></h3><ul>
<li><a href="http://www.w3.org/TR/SVG/struct.html">W3C Document Structre</a></li>
<li><a href="http://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/">Structuring, Grouping, and Referencing in SVG – The &lt;g&gt;, <use>, <defs> and <symbol> Elements</a></li>
</ul>
]]></description>
            <link>http://frontendbabel.info/articles/svg-grouping-and-reusing-elements</link>
            <guid isPermaLink="true">http://frontendbabel.info/articles/svg-grouping-and-reusing-elements</guid>
            <dc:creator><![CDATA[Yulya Buhvalova]]></dc:creator>
            <pubDate>Mon, 14 Jul 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[What Every Frontend Developer Should Know About Webpage Rendering]]></title>
            <description><![CDATA[<p class="text__p">Today I&#39;d like to focus on the subject of web page rendering and why it is important in web development. A lot of articles are available covering the subject, but the information is scattered and somehow fragmented. To wrap my head around the subject, for example, I had to study a lot of sources. That&#39;s why I decided I should write this article. I believe the article will be useful for beginners as well as for more advanced developers who want to refresh and structure what they already know.</p><!-- cut -->

<p class="text__p">Rendering has to be optimized from the very beginning, when the page layout is being defined, as styles and scripts play the crucial role in page rendering. Professionals have to know certain tricks to avoid performance problems.</p><p class="text__p">This article does not study the inner browser mechanics in detail, but rather offers some common principles. Different browser engines work differently, this would make a browser-specific study even more complicated.</p><h2 class="text-header text-header_lvl_2" id="how-do-browsers-render-a-web-page"><a href="#how-do-browsers-render-a-web-page" class="text-header__anchor">How do browsers render a web page</a></h2><p class="text__p">We start with an overview of browser actions when rendering a page:</p><ol>
<li>The DOM (Document Object Model) is formed from the HTML that is received from a server.</li>
<li>Styles are loaded and parsed, forming the CSSOM (CSS Object Model).</li>
<li>On top of DOM and CSSOM, a rendering tree is created, which is a set of objects to be rendered (Webkit calls each of those a &quot;renderer&quot; or &quot;render object&quot;, while in Gecko it&#39;s a &quot;frame&quot;). Render tree reflects the DOM structure except for invisible elements (like the &lt;head&gt; tag or elements that have <code>display:none;</code> set). Each text string is represented in the rendering tree as a separate renderer. Each of the rendering objects contains its corresponding DOM object (or a text block) plus the calculated styles. In other words, the render tree describes the visual representation of a DOM.</li>
<li>For each render tree element, its coordinates are calculated, which is called &quot;layout&quot;. Browsers use a flow method which only required one pass to layout all the elements (tables require more than one pass).</li>
<li>Finally, this gets actually displayed in a browser window, a process called &quot;painting&quot;.</li>
</ol>
<p class="text__p">When users interact with a page, or scripts modify it, some of the aforementioned operations have to be repeated, as the underlying page structure changes.</p><h3 class="text-header text-header_lvl_3" id="repaint"><a href="#repaint" class="text-header__anchor">Repaint</a></h3><p class="text__p">When changing element styles which don&#39;t affect the element&#39;s position on a page (such as <code>background-color</code>, <code>border-color</code>, <code>visibility</code>), the browser just repaints the element again with the new styles applied (that means a &quot;repaint&quot; or &quot;restyle&quot; is happening).</p><h3 class="text-header text-header_lvl_3" id="reflow"><a href="#reflow" class="text-header__anchor">Reflow</a></h3><p class="text__p">When the changes affect document contents or structure, or element position, a reflow (or relayout) happens. These changes are usually triggered by:</p><ul>
<li>DOM manipulation (element addition, deletion, altering, or changing element order);</li>
<li>Contents changes, including text changes in form fields;</li>
<li>Calculation or altering of CSS properties;</li>
<li>Adding or removing style sheets;</li>
<li>Changing the &quot;class&quot; attribute;</li>
<li>Browser window manipulation (resizing, scrolling);</li>
<li>Pseudo-class activation (:hover).</li>
</ul>
<h2 class="text-header text-header_lvl_2" id="how-browsers-optimize-rendering"><a href="#how-browsers-optimize-rendering" class="text-header__anchor">How browsers optimize rendering</a></h2><p class="text__p">Browsers are doing their best to restrict repaint/reflow to the area that covers the changed elements only. For example, a size change in an absolute/fixed positioned element only affects the element itself and its descendants, whereas a similar change in a statically positioned element triggers reflow for all the subsequent elements.</p><p class="text__p">Another optimization technique is that while running pieces of JavaScript code, browsers cache the changes, and apply them in a single pass after the code was run. For example, this piece of code will only trigger one reflow and repaint:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>var $body = $('body');
$body.css('padding', '1px'); // reflow, repaint
$body.css('color', 'red'); // repaint
$body.css('margin', '2px'); // reflow, repaint
// only 1 reflow and repaint will actually happen</code></pre><p class="text__p">However, as mentioned above, accessing an element property triggers a forced reflow. This will happen if we add an extra line that reads an element property to the previous block:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>var $body = $('body');
$body.css('padding', '1px');
$body.css('padding'); // reading a property, a forced reflow
$body.css('color', 'red');
$body.css('margin', '2px');</code></pre><p class="text__p">As a result, we get 2 reflows instead of one. Because of this, you should group reading element properties together to optimize performance (<a href="http://jsbin.com/duhah/2/edit">see a more detailed example on JSBin</a>).</p><p class="text__p">There are situations when you have to trigger a forced reflow. Example: we have to apply the same property (&quot;margin-left&quot; for example) to the same element twice. Initially, it should be set to <code>100px</code> without animation, and then it has to be animated with <code>transition</code> to a value of <code>50px</code>. You can study this example <a href="http://jsbin.com/qutev/1/edit">on JSBin</a> right now, but I&#39;ll describe it here in more detail.</p><p class="text__p">We start by creating a CSS class with a transition:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>.has-transition {
   -webkit-transition: margin-left 1s ease-out;
      -moz-transition: margin-left 1s ease-out;
        -o-transition: margin-left 1s ease-out;
           transition: margin-left 1s ease-out;
}</code></pre><p class="text__p">Then proceed with the implementation:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>// our element that has a "has-transition" class by default
var $targetElem = $('#targetElemId');

// remove the transition class
$targetElem.removeClass('has-transition');

// change the property expecting the transition to be off, as the class is not there
// anymore
$targetElem.css('margin-left', 100);

// put the transition class back
$targetElem.addClass('has-transition');

// change the property
$targetElem.css('margin-left', 50);</code></pre><p class="text__p">This implementation, however, does not work as expected. The changes are cached and applied only at the end of the code block. What we need is a forced reflow, which we can achieve by making the following changes:</p><pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "js"} }'><code>// remove the transition class
$(this).removeClass('has-transition');

// change the property
$(this).css('margin-left', 100);

// trigger a forced reflow, so that changes in a class/property get applied immediately
$(this)[0].offsetHeight; // an example, other properties would work, too

// put the transition class back
$(this).addClass('has-transition');

// change the property
$(this).css('margin-left', 50);</code></pre><p class="text__p">Now this works as expected.</p><h2 class="text-header text-header_lvl_2" id="practical-advice-on-optimization"><a href="#practical-advice-on-optimization" class="text-header__anchor">Practical advice on optimization</a></h2><p class="text__p">Summarizing the available information, I could recommend the following:</p><ul>
<li>Create valid HTML and CSS, do not forget to specify the document encoding. Styles should be included into &lt;head&gt;, and scripts appended to the end of the &lt;body&gt; tag.</li>
<li>Try to simplify and optimize CSS selectors (this optimization is almost universally ignored by developers who mostly use CSS preprocessors). Keep nesting levels at a minimum. This is how CSS selectors rank according to their performance (starting from the fastest ones):<ol>
<li>Identificator: <code>#id</code></li>
<li>Class: <code>.class</code></li>
<li>Tag: <code>div</code></li>
<li>Adjacent sibling selector: <code>a + i</code></li>
<li>Parent selector: <code>ul &gt; li</code></li>
<li>Universal selector: <code>*</code></li>
<li>Attribute selector: <code>input[type=&quot;text&quot;]</code></li>
<li>Pseudoclasses and pseudoelements: <code>a:hover</code>
You should remember that browsers process selectors from right to left, that&#39;s why the rightmost selector should be the fastest one — either <code>#id</code> or <code>.class</code>:</li>
</ol>
</li>
</ul>
<pre class="highlight i-bem" data-bem='{ "highlight": { "lang": "css"} }'><code>div * {...} // bad
.list li {...} // bad
.list-item {...} // good
#list .list-item {...} // good</code></pre><ol>
<li>In your scripts, minimize DOM manipulation whenever possible. Cache everything, including properties and objects (if they are to be reused). It&#39;s better to work with an &quot;offline&quot; element when performing complicated manipulations (an &quot;offline&quot; element is one that is disconnected from DOM and only stored in memory), and append it to DOM afterwards.</li>
<li>If you use jQuery to select elements, follow <a href="http://learn.jquery.com/performance/optimize-selectors/">jQuery selectors best practices</a>.</li>
<li>To change element&#39;s styles, modifying the &quot;class&quot; attribute is one of the most performant ways. The deeper in the DOM tree you perform this change, the better (also because this helps decouple logic from presentation).</li>
<li>Animate only absolute/fixed positioned elements if you can.</li>
<li>It is a good idea to disable complicated <code>:hover</code> animations while scrolling (e.g. by adding an extra &quot;no-hover&quot; class to &lt;body&gt;). <a href="http://habrahabr.ru/post/204238/">Read an article on the subject</a>.</li>
</ol>
<p class="text__p">For a more detailed overview, have a look at these articles:</p><ol>
<li><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm">How browsers work</a></li>
<li><a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/">Rendering: repaint, reflow/relayout, restyle</a></li>
</ol>
<p class="text__p">I hope you find this article useful!</p>]]></description>
            <link>http://frontendbabel.info/articles/webpage-rendering-101</link>
            <guid isPermaLink="true">http://frontendbabel.info/articles/webpage-rendering-101</guid>
            <dc:creator><![CDATA[Alexander Skutin]]></dc:creator>
            <pubDate>Mon, 30 Jun 2014 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>